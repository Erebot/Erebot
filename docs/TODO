This list is likely incomplete and is merely a rough enumeration of what I would
like to add/improve/refactor/whatever in Erebot.
These notes are more or less organized with the most simple-to-implement stuff
coming first and the not-so-simple-to-implement stuff coming after that
(that is, the further you read on, the harder it is to add that feature).

-   okay, now that the DBConnector seems ready, it would probably be the right
    time to decide how other modules interact with the DB. I mean seriously,
    a LOT of questions need to be answered to get this correctly:
    *   Does each one of the modules gets its own table ?
    *   Do we allow modules to share their data ? How ?
    *   What if more than one table is required ?
        What is the chosen naming scheme then ?
    *   other questions I ought to think about...

-   improve bits of the Uno game (like the way we keep track of states)

-   implement persistent user accounts on the bot, which means that:
        -> We need to decide on a stable way to use databases.

-   make other modules (optionally ?) dependent on the DBConnector.
    This could offer some interesting possibilities:
    *   save games' scores in a database
    *   provide statistics (about games and about just any other information the
        bot knows about, like Thales IRC Statistics)
    *   (re)implement admin module. Upon installation, a super-admin account is
        created. This account can then be used to create other accounts.
        Accounts have permissions attached to them. One of these permissions is
        to allow some management tasks such as reload modules, changing a
        module's settings (temporarily and/or permanently ?).

-   implement two sets of configuration: running & startup, similar to what's
    provided by Cisco routers. In particular:
    *   the startup configuration is written in some external configuration file
        (probably Erebot.xml in our case). The file is read each time you start
        the bot.
    *   the running configuration is the set of settings which are used during
        the lifetime on the bot. So the bot starts up with the startup settings,
        which are copied as the running configuration and live changes are made
        on the running configuration.
    *   the running configuration may be saved as the new startup configuration.
    *   the running configuration may be reloaded at any time by overwriting it
        with settings found in the Erebot.xml file.
        How settings are merged between running & startup configuration has yet
        to be defined. Simplest solution is to overwriting running configuration
        with settings from the startup configuration upon reloading.

-   reimplement (and finish the code for) the Thiercelieux game...
    There's room for a lot of improvements here, but the codebase is already
    quite big. So, expect a lot of efforts needed to reimplement that...

###################################

Take a break. The following notes were merged from an unsorted TODO file that
was committed some time before this one was. So... it's not "up-to-date", it
contains redundant entries with the previous list, it makes references to old
ideas & modules, etc. That being said, "USE THIS LIST AT YOUR OWN RISK" is the
best thing I could probably advice about it.

Wanted (additions to) modules :

- DbConnector : handle database connection & usage
    Make lots of things automatic ?
    Maybe have a look at Hibernate/Struts to see how they work
    DONE. Not sure if anything more may be required.
    Basically, it only creates database connections based on config settings.
    It's that simple/dumb, really.

- UserAccount : handle user accounts & privileges
    Depends on DbConnector
    Maybe merge this with NickTracker module ?

- GoF : add highscore support
    Depends on UserAccount

- Uno : add highscore support
    Depends on UserAccount

- Thiercelieux : port game to new arch
    Requires a lot of work

- Keywords : associate sentences to keywords
    Depends on DbConnector (associations get stored in db)
    Copy rbot's features

- Quotes : the usual quoting system
    Depends on DbConnector (quotes get stored in db)
    Have a look at rbot's way of doing things

