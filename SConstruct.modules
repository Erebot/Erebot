# -*- coding: utf-8 -*-
# vim: set filetype=python

import glob
import os, os.path
import sys

Import('*')

sources = ['%s.php' % component] + list(irglob('src/', '*.php'))
POT = 'i18n/%s.pot' % component
locales = glob.iglob('i18n/*/LC_MESSAGES/')
POs = ["%s/%s.po" % (l, component) for l in locales if l != 'en_US']
MOs = ["%s/%s.mo" % (l, component) for l in locales]
english_PO = 'i18n/en_US/LC_MESSAGES/%s.po' % component

for tool in (
        'phplemon',
    ):
    env[tool] = env.WhereIs(tool)

# Documentation
env.Requires('%s.tagfile' % component, 'doc')
env.Depends('#doc', 'doc')
env.Command('doc',
    ['Doxyfile'] + sources, [
        env.Action('$doxygen', chdir=1),
        env.Action('$make -C doc/latex', chdir=1),
    ], ENV=dict(
        EREBOT_MODULE=component,
        EREBOT_TAGFILES="",
    )
)
env.SideEffect(['%s.tagfile' % component], 'doc')
env.Clean('doc', ['%s.tagfile' % component, 'doc'])

# Unit tests
if os.path.exists(env.Dir('tests').abspath):
    env.Command('test', ['phpunit.xml'],
        env.Action('$phpunit', chdir=1),
        ENV=dict(
            PHP_GETTEXT_PATH=os.environ.get('PHP_GETTEXT_PATH', ''),
        )
    )
    env.AlwaysBuild('test')
    env.Depends('#test', 'test')
# Print a warning for missing tests,
# but only if we're actually testing.
elif 'test' in COMMAND_LINE_TARGETS:
    print >> sys.stderr, "Warning: no tests found for %r" % component

# I18N
env.ExtractMessages(POT, sources)
env.Alias('extract_messages', POT)
env.UpdateCatalog(POs, POT)
env.TranslateCatalog(english_PO, POT)
env.Alias('update_catalog', POs + [english_PO])

i18n = env.CompileCatalog(source=POs + [english_PO])
env.Alias('compile_catalog', MOs)

if 'catalog' in ARGUMENTS:
    target =    "i18n/%s/LC_MESSAGES/%s.po" % (ARGUMENTS['catalog'], component)
    env.Command(target, POT, [
        Mkdir('i18n/%s/LC_MESSAGES/' % ARGUMENTS['catalog']),
        '$msginit --no-translator -w 80 -l %s -i $SOURCE -o $TARGET' % ARGUMENTS['catalog'],
    ])
    env.Alias('init_catalog', target)

env.NoClean(POT, english_PO, *POs)
env.Precious(POT, english_PO, *POs)

Default(i18n)

