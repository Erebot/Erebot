<!--
    This file is part of Erebot.

    Erebot is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Erebot is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Erebot.  If not, see <http://www.gnu.org/licenses/>.
-->
<grammar xmlns="http://relaxng.org/ns/structure/1.0"
    xmlns:sch="http://www.ascc.net/xml/schematron"
    ns="http://www.erebot.net/xmlns/erebot/styling"
    datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

    <!--
        This is necessary to make Erebot's namespace for the styling API
        known to Schematron validators (or an XSLT processor).
    -->
    <sch:ns uri="http://www.erebot.net/xmlns/erebot/styling" prefix="msg"/>

    <!--
        Valid colors: either an integer or the name of a predefined color.
        Colors are handled in a case-insensitive fashion.
    -->
    <define name="color-type">
        <choice>
            <data type="integer"/>

            <data type="string">
                <!-- "white" -->
                <param name="pattern">[wW][hH][iI][tT][eE]</param>
            </data>

            <data type="string">
                <!-- "black" -->
                <param name="pattern">[bB][lL][aA][cC][kK]</param>
            </data>

            <data type="string">
                <!-- "blue" or "navy blue" or "dark blue" -->
                <param name="pattern">((([nN][aA][vV][yY])|([dD][aA][rR][kK]))[-_ ])?[bB][lL][uU][eE]</param>
            </data>

            <data type="string">
                <!-- "green" or "dark green" -->
                <param name="pattern">(([dD][aA][rR][kK])[-_ ])?[gG][rR][eE][eE][nN]</param>
            </data>

            <data type="string">
                <!-- "red" -->
                <param name="pattern">[rR][eE][dD]</param>
            </data>

            <data type="string">
                <!-- "brown" -->
                <param name="pattern">[bB][rR][oO][wW][nN]</param>
            </data>

            <data type="string">
                <!-- "purple" -->
                <param name="pattern">[pP][uU][rR][pP][lL][eE]</param>
            </data>

            <data type="string">
                <!-- "orange" -->
                <param name="pattern">[oO][rR][aA][nN][gG][eE]</param>
            </data>

            <data type="string">
                <!-- "olive" -->
                <param name="pattern">[oO][lL][iI][vV][eE]</param>
            </data>

            <data type="string">
                <!-- "yellow" -->
                <param name="pattern">[yY][eE][lL][lL][oO][wW]</param>
            </data>

            <data type="string">
                <!-- "light green" or "lime green" -->
                <param name="pattern">((([lL][iI][gG][hH][tT])|([lL][iI][mM][eE]))[-_ ])[gG][rR][eE][eE][nN]</param>
            </data>

            <data type="string">
                <!-- "cyan" or "dark cyan" or "teal" -->
                <param name="pattern">((([dD][aA][rR][kK])[-_ ])?[cC][yY][aA][nN])|([tT][eE][aA][lL])</param>
            </data>

            <data type="string">
                <!-- "light cyan" -->
                <param name="pattern">[lL][iI][gG][hH][tT][-_ ][cC][yY][aA][nN]</param>
            </data>
            <data type="string">
                <!-- "aqua light" which is another alias for "light cyan" -->
                <param name="pattern">[aA][qQ][uU][aA][-_ ][lL][iI][gG][hH][tT]</param>
            </data>

            <data type="string">
                <!-- "light blue" or "royal blue" -->
                <param name="pattern">((([lL][iI][gG][hH][tT])|([rR][oO][yY][aA][lL]))[-_ ])[bB][lL][uU][eE]</param>
            </data>

            <data type="string">
                <!-- "pink" or "hot pink" -->
                <param name="pattern">(([hH][oO][tT])[-_ ])?[pP][iI][nN][kK]</param>
            </data>

            <data type="string">
                <!-- "gray" or "grey" or "dark gray" or "dark grey" -->
                <param name="pattern">(([dD][aA][rR][kK])[-_ ])?[gG][rR][eEaA][yY]</param>
            </data>

            <data type="string">
                <!-- "light gray" or "light grey" -->
                <param name="pattern">[lL][iI][gG][hH][tT][-_ ][gG][rR][eEaA][yY]</param>
            </data>
        </choice>
    </define>

    <!-- Valid variable identifiers (for use in the "var" tag). -->
    <define name="identifier-type">
        <text/>
    </define>

    <!-- Entry point. -->
    <start>
        <ref name="msg"/>
    </start>

    <!--
        Root tag for templates.
        The styling API adds this tag automatically to the string
        you pass, so you don't need to worry about it.
    -->
    <define name="msg">
        <!--
            A message may contain any number
            of subtags, in any order.
        -->
        <element name="msg">
            <ref name="subtags"/>
        </element>
    </define>

    <!-- Special tags that may appear in a message. -->
    <define name="subtags">
        <interleave>
            <zeroOrMore><ref name="var"/></zeroOrMore>
            <zeroOrMore><ref name="u"/></zeroOrMore>
            <zeroOrMore><ref name="b"/></zeroOrMore>
            <zeroOrMore><ref name="color"/></zeroOrMore>
            <zeroOrMore><ref name="for"/></zeroOrMore>
            <zeroOrMore><ref name="plural"/></zeroOrMore>
            <text/>
        </interleave>
    </define>

    <!--
        The "var" tag can be used to embed the value
        of a template variable in the final message.
    -->
    <define name="var">
        <element name="var">
            <!-- Name of the variable to embed. -->
            <attribute name="name"><ref name="identifier-type"/></attribute>

            <empty/>
        </element>
    </define>

    <!--
        The "u" tag can be used to underline some part
        of the message, hence it has the same role as
        its HTML counterpart.
    -->
    <define name="u">
        <element name="u">
            <ref name="subtags"/>
        </element>
    </define>

    <!--
        The "u" tag can be used to put some part of the message
        in bold, hence it has the same role as its HTML counterpart.
    -->
    <define name="b">
        <element name="b">
            <ref name="subtags"/>
        </element>
    </define>

    <!--
        The "color" tag can be used to change the foreground or
        background color of some part of the message.
    -->
    <define name="color">
        <element name="color">
            <!--
                You MUST provide at least one of the "fg"
                or "bg" attribute when using this tag.
            -->
            <sch:pattern name="Validate color attributes">
                <sch:rule context="msg:color">
                    <sch:assert test="@fg or @bg">
                        The "fg" attribute or the "bg" attribute or both
                        must be supplied when using the &lt;color&gt; tag.
                    </sch:assert>
                </sch:rule>
            </sch:pattern>
            <optional>
                <!--
                    Set the foreground color of this tag's
                    content to the color in this attribute.
                -->
                <attribute name="fg">
                    <ref name="color-type"/>
                </attribute>
            </optional>
            <optional>
                <!--
                    Set the background color of this tag's
                    content to the color in this attribute.
                -->
                <attribute name="bg">
                    <ref name="color-type"/>
                </attribute>
            </optional>

            <ref name="subtags"/>
        </element>
    </define>

    <!--
        The "for" tag can be used to loop over an array
        that has been previously assigned to a variable
        in this template.
    -->
    <define name="for">
        <element name="for">
            <!-- Name of the variable containing the array to loop over. -->
            <attribute name="from"><ref name="identifier-type"/></attribute>
            <!--
                Name of the variable that will store each value
                in turn as the array is looped over.
            -->
            <attribute name="item"><ref name="identifier-type"/></attribute>
            <optional>
                <!--
                    Name of the variable that will store each key
                    in turn as the array is looped over.
                -->
                <attribute name="key"><ref name="identifier-type"/></attribute>
            </optional>
            <optional>
                <!-- Alias for "separator". -->
                <attribute name="sep"><text/></attribute>
            </optional>
            <!--
                Separator to use between entries as they are
                rendered, except between the last two entries.
            -->
            <optional>
                <attribute name="separator"><text/></attribute>
            </optional>
            <optional>
                <!-- Alias for "last_separator". -->
                <attribute name="last"><text/></attribute>
            </optional>
            <!--
                Separator used for the last
                two entries in the array.
            -->
            <optional>
                <attribute name="last_separator"><text/></attribute>
            </optional>

            <ref name="subtags"/>
        </element>
    </define>

    <!--
        The "plural" tag can be used to have a group of words
        rendered with the correct plural form depending on the
        value of a template variable.
    -->
    <define name="plural">
        <element name="plural">
            <!--
                Name of the variable that indicates
                the correct plural form to use.

                The value this points to MUST be an integer.
            -->
            <attribute name="var"><ref name="identifier-type"/></attribute>

            <oneOrMore>
                <!--
                    Each valid plural form is described in terms
                    of a "case" subtag.
                -->
                <element name="case">
                    <!--
                        The "case" subtag MUST have a "form" attribute
                        dictating what plural form is currently being
                        described. Valid values for this attribute are
                        defined by the Unicode Consortium.

                        Translators can redefine the plural forms in
                        their translations so that they match the rules
                        in use in their country.

                        See http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html
                    -->
                    <attribute name="form">
                        <choice>
                            <value>zero</value>
                            <value>one</value>
                            <value>two</value>
                            <value>few</value>
                            <value>many</value>
                            <value>other</value>
                        </choice>
                    </attribute>

                    <ref name="subtags"/>
                </element>
            </oneOrMore>
        </element>
    </define>
</grammar>
